{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":81285,"databundleVersionId":8778365,"sourceType":"competition"}],"dockerImageVersionId":30732,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-21T17:53:51.514927Z","iopub.execute_input":"2024-06-21T17:53:51.515407Z","iopub.status.idle":"2024-06-21T17:53:52.047676Z","shell.execute_reply.started":"2024-06-21T17:53:51.515360Z","shell.execute_reply":"2024-06-21T17:53:52.045982Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/alx-movie-recommendation-project-2024/sample_submission.csv\n/kaggle/input/alx-movie-recommendation-project-2024/movies.csv\n/kaggle/input/alx-movie-recommendation-project-2024/imdb_data.csv\n/kaggle/input/alx-movie-recommendation-project-2024/genome_tags.csv\n/kaggle/input/alx-movie-recommendation-project-2024/genome_scores.csv\n/kaggle/input/alx-movie-recommendation-project-2024/train.csv\n/kaggle/input/alx-movie-recommendation-project-2024/test.csv\n/kaggle/input/alx-movie-recommendation-project-2024/tags.csv\n/kaggle/input/alx-movie-recommendation-project-2024/links.csv\n","output_type":"stream"}]},{"cell_type":"code","source":"# Install packages here\n# Packages for data processing\nimport numpy as np\nimport pandas as pd\nimport datetime\nfrom sklearn import preprocessing\nfrom sklearn.datasets import make_blobs\nfrom sklearn.preprocessing import StandardScaler\nfrom sklearn.feature_extraction.text import TfidfVectorizer\nfrom sklearn.metrics.pairwise import cosine_similarity\nimport re\nfrom scipy.sparse import csr_matrix\nimport scipy as sp\n\n\n# Packages for visualization\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n# Packages for modeling\nfrom surprise import Reader\nfrom surprise import Dataset\nfrom surprise import KNNWithMeans\nfrom surprise import KNNBasic\nfrom surprise.model_selection import cross_validate\nfrom surprise.model_selection import GridSearchCV\nfrom surprise import SVD\nfrom surprise import SVDpp\nfrom surprise import NMF\nfrom surprise import SlopeOne\nfrom surprise import CoClustering\nfrom surprise.model_selection import train_test_split\nfrom surprise import accuracy\nimport heapq\n\n# Packages for model evaluation\nfrom sklearn.metrics import mean_squared_error\nfrom sklearn.metrics import mean_absolute_error\nfrom time import time\n\n# Package to suppress warnings\nimport warnings\nwarnings.filterwarnings(\"ignore\")\n\n# Packages for saving models\nimport pickle","metadata":{"execution":{"iopub.status.busy":"2024-06-21T17:53:52.050556Z","iopub.execute_input":"2024-06-21T17:53:52.051997Z","iopub.status.idle":"2024-06-21T17:53:53.266553Z","shell.execute_reply.started":"2024-06-21T17:53:52.051950Z","shell.execute_reply":"2024-06-21T17:53:53.265079Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"# Load the data\ntrain_df = pd.read_csv('/kaggle/input/alx-movie-recommendation-project-2024/train.csv')\ntest_df = pd.read_csv('/kaggle/input/alx-movie-recommendation-project-2024/test.csv')\nmovies_df = pd.read_csv('/kaggle/input/alx-movie-recommendation-project-2024/movies.csv')\ntags_df = pd.read_csv('/kaggle/input/alx-movie-recommendation-project-2024/tags.csv')\nlinks_df = pd.read_csv('/kaggle/input/alx-movie-recommendation-project-2024/links.csv')\ngenome_scores_df = pd.read_csv('/kaggle/input/alx-movie-recommendation-project-2024/genome_scores.csv')\ngenome_tags_df = pd.read_csv('/kaggle/input/alx-movie-recommendation-project-2024/genome_tags.csv')\n\n# Display the first few rows of each dataframe\nprint(train_df.head())\nprint(test_df.head())\nprint(movies_df.head())\nprint(tags_df.head())\nprint(links_df.head())\nprint(genome_scores_df.head())\nprint(genome_tags_df.head())","metadata":{"execution":{"iopub.status.busy":"2024-06-21T17:53:53.268131Z","iopub.execute_input":"2024-06-21T17:53:53.268771Z","iopub.status.idle":"2024-06-21T17:54:16.154119Z","shell.execute_reply.started":"2024-06-21T17:53:53.268733Z","shell.execute_reply":"2024-06-21T17:54:16.152612Z"},"trusted":true},"execution_count":4,"outputs":[{"name":"stdout","text":"   userId  movieId  rating   timestamp\n0    5163    57669     4.0  1518349992\n1  106343        5     4.5  1206238739\n2  146790     5459     5.0  1076215539\n3  106362    32296     2.0  1423042565\n4    9041      366     3.0   833375837\n   userId  movieId\n0       1     2011\n1       1     4144\n2       1     5767\n3       1     6711\n4       1     7318\n   movieId                               title  \\\n0        1                    Toy Story (1995)   \n1        2                      Jumanji (1995)   \n2        3             Grumpier Old Men (1995)   \n3        4            Waiting to Exhale (1995)   \n4        5  Father of the Bride Part II (1995)   \n\n                                        genres  \n0  Adventure|Animation|Children|Comedy|Fantasy  \n1                   Adventure|Children|Fantasy  \n2                               Comedy|Romance  \n3                         Comedy|Drama|Romance  \n4                                       Comedy  \n   userId  movieId               tag   timestamp\n0       3      260           classic  1439472355\n1       3      260            sci-fi  1439472256\n2       4     1732       dark comedy  1573943598\n3       4     1732    great dialogue  1573943604\n4       4     7569  so bad it's good  1573943455\n   movieId  imdbId   tmdbId\n0        1  114709    862.0\n1        2  113497   8844.0\n2        3  113228  15602.0\n3        4  114885  31357.0\n4        5  113041  11862.0\n   movieId  tagId  relevance\n0        1      1    0.02875\n1        1      2    0.02375\n2        1      3    0.06250\n3        1      4    0.07575\n4        1      5    0.14075\n   tagId           tag\n0      1           007\n1      2  007 (series)\n2      3  18th century\n3      4         1920s\n4      5         1930s\n","output_type":"stream"}]},{"cell_type":"code","source":"print(\"Train: \")\nprint(str(train_df.isnull().sum()))\nprint(\"************\")\nprint(\"Test: \")\nprint(str(test_df.isnull().sum()))\nprint(\"************\")","metadata":{"execution":{"iopub.status.busy":"2024-06-21T17:54:16.157226Z","iopub.execute_input":"2024-06-21T17:54:16.157712Z","iopub.status.idle":"2024-06-21T17:54:16.219423Z","shell.execute_reply.started":"2024-06-21T17:54:16.157671Z","shell.execute_reply":"2024-06-21T17:54:16.218009Z"},"trusted":true},"execution_count":5,"outputs":[{"name":"stdout","text":"Train: \nuserId       0\nmovieId      0\nrating       0\ntimestamp    0\ndtype: int64\n************\nTest: \nuserId     0\nmovieId    0\ndtype: int64\n************\n","output_type":"stream"}]},{"cell_type":"code","source":"# Load the data into Surprise format\nreader = Reader(rating_scale=(0.5, 5.0))\ndata = Dataset.load_from_df(train_df[['userId', 'movieId', 'rating']], reader)\n\n# Split the data into train and test sets\ntrainset, testset = train_test_split(data, test_size=0.2)\n\n# Train the SVD algorithm\nmodel = SVD(n_epochs=40,n_factors=550,init_std_dev=0.005,random_state=42,verbose=True)\nmodel.fit(trainset)\n\n# Predict ratings for the test set\npredictions = model.test(testset)\n\n# Evaluate the algorithm\naccuracy.rmse(predictions)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T17:54:16.221364Z","iopub.execute_input":"2024-06-21T17:54:16.221853Z","iopub.status.idle":"2024-06-21T18:15:11.166349Z","shell.execute_reply.started":"2024-06-21T17:54:16.221816Z","shell.execute_reply":"2024-06-21T18:15:11.164905Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Processing epoch 0\nProcessing epoch 1\nProcessing epoch 2\nProcessing epoch 3\nProcessing epoch 4\nProcessing epoch 5\nProcessing epoch 6\nProcessing epoch 7\nProcessing epoch 8\nProcessing epoch 9\nProcessing epoch 10\nProcessing epoch 11\nProcessing epoch 12\nProcessing epoch 13\nProcessing epoch 14\nProcessing epoch 15\nProcessing epoch 16\nProcessing epoch 17\nProcessing epoch 18\nProcessing epoch 19\nProcessing epoch 20\nProcessing epoch 21\nProcessing epoch 22\nProcessing epoch 23\nProcessing epoch 24\nProcessing epoch 25\nProcessing epoch 26\nProcessing epoch 27\nProcessing epoch 28\nProcessing epoch 29\nProcessing epoch 30\nProcessing epoch 31\nProcessing epoch 32\nProcessing epoch 33\nProcessing epoch 34\nProcessing epoch 35\nProcessing epoch 36\nProcessing epoch 37\nProcessing epoch 38\nProcessing epoch 39\nRMSE: 0.7969\n","output_type":"stream"},{"execution_count":6,"output_type":"execute_result","data":{"text/plain":"0.7969264506383273"},"metadata":{}}]},{"cell_type":"code","source":"userId = test_df['userId'].values.tolist()\nmovieId = test_df['movieId'].values.tolist()\n\ncount = len(userId)\nrating = []\nids = []\n\nfor i in range(count):\n    result = model.predict(userId[i], movieId[i])[3]\n\n    rating.append(result)\n\n    ids.append(str(userId[i]) + '_' + str(movieId[i]))","metadata":{"execution":{"iopub.status.busy":"2024-06-21T18:15:11.168308Z","iopub.execute_input":"2024-06-21T18:15:11.168718Z","iopub.status.idle":"2024-06-21T18:16:16.936948Z","shell.execute_reply.started":"2024-06-21T18:15:11.168675Z","shell.execute_reply":"2024-06-21T18:16:16.935349Z"},"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"code","source":"test_sub_df =  pd.DataFrame({\n        'Id': ids,\n        'rating': rating\n         })\ntest_sub_df.head()","metadata":{"execution":{"iopub.status.busy":"2024-06-21T18:16:16.939514Z","iopub.execute_input":"2024-06-21T18:16:16.940177Z","iopub.status.idle":"2024-06-21T18:16:18.933056Z","shell.execute_reply.started":"2024-06-21T18:16:16.940126Z","shell.execute_reply":"2024-06-21T18:16:18.931640Z"},"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"       Id    rating\n0  1_2011  3.161004\n1  1_4144  4.401028\n2  1_5767  3.955620\n3  1_6711  4.107807\n4  1_7318  2.896429","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Id</th>\n      <th>rating</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1_2011</td>\n      <td>3.161004</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1_4144</td>\n      <td>4.401028</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1_5767</td>\n      <td>3.955620</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1_6711</td>\n      <td>4.107807</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1_7318</td>\n      <td>2.896429</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_sub_df.to_csv('Final_submission2.csv', index=False)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T18:16:18.934828Z","iopub.execute_input":"2024-06-21T18:16:18.935225Z","iopub.status.idle":"2024-06-21T18:16:35.844384Z","shell.execute_reply.started":"2024-06-21T18:16:18.935192Z","shell.execute_reply":"2024-06-21T18:16:35.842976Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}